src/UC_E.cpp: In instantiation of ‘Derived<T>::Derived(Derived<T>&&) [with T = int]’:
src/UC_E.cpp:34:33:   required from here
src/UC_E.cpp:29:46: error: no matching function for call to ‘forward(Derived<int>&)’
     Derived(Derived&& d) : C<T>(forward<C<T>>(d)){}
                                              ^
In file included from src/UC_E.cpp:2:0:
./include/implementation.hpp:41:22: note: candidate: template<class T, class U> typename std::enable_if<((std::is_lvalue_reference<_Arg>::value && (! std::is_rvalue_reference< <template-parameter-1-1> >::value)) && std::is_same<T&, U&>::value), T&&>::type impl::forward(U&&)
         , T&&>::type forward(U&& a){
                      ^
./include/implementation.hpp:41:22: note:   template argument deduction/substitution failed:
./include/implementation.hpp: In substitution of ‘template<class T, class U> typename std::enable_if<((std::is_lvalue_reference<_Arg>::value && (! std::is_rvalue_reference< <template-parameter-1-1> >::value)) && std::is_same<T&, U&>::value), T&&>::type impl::forward(U&&) [with T = C<int>; U = Derived<int>&]’:
src/UC_E.cpp:29:46:   required from ‘Derived<T>::Derived(Derived<T>&&) [with T = int]’
src/UC_E.cpp:34:33:   required from here
./include/implementation.hpp:41:22: error: no type named ‘type’ in ‘struct std::enable_if<false, C<int>&&>’
